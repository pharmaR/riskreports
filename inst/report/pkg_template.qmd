---
title: "Validation Report - `r params$package`"
date: "`r Sys.time()`"
date-format: "ddd MMM DD hh:mm:ss A YYYY"
params:
  package: dplyr
  image: "rhub/ref-image"
  assessment_path: "../assessments/dplyr.rds"
format:
  html: 
    toc: true  
    embed-resources: true
  # typst:
  #   toc: true
  #   section-numbering: 1.1.1
  #   df-print: default
  #   margin:
  #     x: 2cm
  #     y: 2cm
---

```{r setup, include = FALSE}
options(width = 80L, covr.record_tests = TRUE)
knitr::opts_chunk$set(
    echo = FALSE,
    eval = TRUE,
    error = TRUE,
    cache = FALSE
)
library("tools")
```

# Context


```{r image}
image <- Sys.getenv("DOCKER_IMAGE", unset = NA)
if (!is.na(image) && nzchar(params$image)) {
  image <- params$image
}
```

This report is fully automated and builds on `r image` image.
Documents the installation of this package on an open source R environment, focusing on:

- Installation environment description
- Testing coverage

It is limited to assess whether unit tests and documentation are present and can execute without error. 
An assessment would be required that the tests and documentation are meaningful. 

# Installation environment

```{r loading}
library("riskmetric")
path <- params$repo
pkg <- params$package
risk_path <- params$assessment_path
```


## System Info

```{r execution_info}
tt_sys_info_df <- data.frame(
  Field = c("OS", "Platform", "System", "Execution Time"),
  Value = c(
    sessionInfo()$running,
    R.version$platform,
    R.version$system,
    format(Sys.time(), tz = "UTC", usetz = TRUE)
  ))

tt_sys_info_df
```

## R Session Info

Information about the R environment and capabilities:

```{r session_info}
sessionInfo()
unlist(.Platform)

capabilities()
extSoftVersion()
grSoftVersion()
unlist(.Machine)
RNGkind()
```


## Information about the environment

Environmental and options variables affect how package checks and software in it might behave.
Here is the environ variables when running this report

```{r computing}
riskreports::environ_report(exclude = c("GITHUB_PAT", "APPDATA", 
                                        "ProgramFiles", "ProgramFiles(x86)",
                                        "R_USER", "USERNAME", "USERPROFILE", 
                                        "USERDNSDOMAIN", "USERDOMAIN", 
                                        "USERDOMAIN_ROAMINGPROFILE", "R_DptShare"              
                                        ))
```

```{r options}
riskreports::options_report(exclude = c("usethis.full_name", "usethis.description", "usethis.destdir"))
```


# Package `r pkg`

## Metric based risk assessment

The following metrics are derived from the `riskmetric` R package.

```{r riskmetric2, warning=FALSE, eval=file.exists(risk_path)}
d_riskmetric <- readRDS(risk_path)
```


```{r riskmetric3, warning=FALSE}
# Assesment produces a data.frame with one row
r_riskmetric <- riskreports::assessment(d_riskmetric)
r_riskmetric # Use this to have some summary text and report it.
# d_riskmetric
```


## Dependencies

Overall the package has these dependencies:

```{r dependencies}
d_riskmetric$dependencies
```

