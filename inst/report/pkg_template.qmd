---
title: "Validation Report - `r paste0(params$package_name, '@', params$package_version)`"
date-format: "ddd MMM DD hh:mm:ss A YYYY"
params:
  package_name: dplyr
  package_version: 1.0.0
  package: NULL
  image: "rhub/ref-image"
  assessment_path: "assessments/dplyr.rds"
  hide_reverse_deps: true
format:
  html: 
    toc: true  
    embed-resources: true
  gfm:
    html-math-method: webtex    
  typst:
    toc: true
    section-numbering: 1.1.1
    df-print: default
    margin:
      x: 2cm
      y: 2cm
---

```{r setup, include = FALSE}
options(width = 80L, covr.record_tests = TRUE)
knitr::opts_chunk$set(
    echo = FALSE,
    eval = TRUE,
    error = TRUE,
    cache = FALSE
)
library("tools")
# Adapted from https://stackoverflow.com/a/52327256
library("knitr")
library("riskreports")
hook_old <- knitr::knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
  if (!is.null(options$summary)){
      x <- paste0("<details><br><summary>", options$summary,"</summary><br>", hook_old(x, options), "<br></details>")
  } 
  x
})

```

# Context


```{r loading}
pkg <- params$package
pkg_name <- params$package_name
pkg_version <- params$package_version
risk_path <- params$assessment_path
image <- params$image
```


```{r image}
image <- Sys.getenv("DOCKER_IMAGE", unset = NA)
is_empty <- function(x) {
  is.null(x) || is.na(x) || !nzchar(x)
}
if (is_empty(image) && !is_empty(params$image)) {
  image <- params$image
}
```

This report is fully automated and builds on `r image` image.
Documents the installation of this package on an open source R environment, focusing on:

- Installation environment description
- Testing coverage

It is limited to assess whether unit tests and documentation are present and can execute without error. 
An assessment would be required that the tests and documentation are meaningful. 


# Package `r basename(pkg)`

## Metric based risk assessment

The following metrics are derived from the `riskmetric` R package.

```{r read-riskmetric, warning=FALSE}
d_riskmetric <- readRDS(risk_path)
```


```{r general-riskmetric, warning=FALSE}
#| tab.cap: "**Package general assessment:** Coverage, check results, size, 
#|  download the last year, reverse dependencies and number of dependencies."

# Assesment produces a data.frame with one row
r_riskmetric <- riskreports::assessment(d_riskmetric)
is_na <- sapply(r_riskmetric, function(x) {
    is.na(x) || (is.character(x) && startsWith(x, "no applicable"))
  })
x <- summary_table(r_riskmetric[, !is_na])
knitr::kable(x, row.names = FALSE, align = "cc") # Use this to have some summary text and report it.
# d_riskmetric
```

::: {.content-hidden unless-meta=`r !is_risk_error(d_riskmetric[["license"]])`}

## License

The package uses `r if ("license" %in% names(d_riskmetric) && !is.null(d_riskmetric$license)) cat(d_riskmetric$license)`.

:::

::: {.content-hidden unless-meta=`r !is_risk_error(d_riskmetric[["r_cmd_check"]]) || !is_risk_error(d_riskmetric[["remote_checks"]])`}

## Code checks

Code checks for this package are: 

```{r r_cmd_check, eval=!is_risk_error(d_riskmetric[["r_cmd_check"]])}
d_riskmetric[["r_cmd_check"]]
```



```{r remote_checks, eval=!is_risk_error(d_riskmetric[["remote_checks"]])}
d_riskmetric[["remote_checks"]]
```

:::


## Dependencies

Overall the package has these dependencies:

```{r dependencies-riskmetric}
#| tab.cap: "**Package dependencies**"
deps <- d_riskmetric$dependencies
deps$package <- gsub("\\n", " ", deps$package)
row.names(deps) <- NULL
knitr::kable(deps, row.names = TRUE)
```

::: {.content-visible unless-meta="hide_reverse_deps"}

## Reverse dependencies

Overall the package has `r length(d_riskmetric$reverse_dependencies)` reverse dependencies.

```{r dependencies, results='asis', eval={length(d_riskmetric$reverse_dependencies) < 500}}
cat(paste(d_riskmetric$reverse_dependencies, collapse = ", "))
```

:::

::: {.content-hidden unless-meta=`r !is_risk_error(d_riskmetric[["covr_coverage"]])`}

## Code coverage

Code coverage for this package is: 

```{r covr_coverage}
d_riskmetric[["covr_coverage"]]
```


:::

## Namespace

Overall the package has `r length(d_riskmetric$exported_namespace)` exported objects.
`r sum(d_riskmetric$export_help)` are documented:

```{r namespace}
d_riskmetric$export_help[sort(d_riskmetric$exported_namespace)]
```

## Examples

There are `r if (!is_na["has_examples"]) sum(d_riskmetric$has_examples)` examples from `r if (!is_na["has_examples"]) {length(d_riskmetric$has_examples)}` help pages (`r if (!is_na["has_examples"]) {sprintf("%.2f%%", sum(d_riskmetric$has_examples)/length(d_riskmetric$has_examples)*100)} else {"?"} `).

## NEWS

The package has `r if ("has_news" %in% names(d_riskmetric) && !is.null(d_riskmetric$has_news)) print(d_riskmetric$has_news)` NEWS file and it is `r if (is.null(d_riskmetric$news_current) && !d_riskmetric$news_current) "not"` current.


# Installation environment


## System Info

```{r execution_info}
#| tab.cap: "**System information**. Table about the system used to check the package."
tt_sys_info_df <- data.frame(
  Field = c("Image", "OS", "Platform", "System", "Execution Time"),
  Value = c(
    image,
    sessionInfo()$running,
    R.version$platform,
    R.version$system,
    format(Sys.time(), tz = "UTC", usetz = TRUE)
  ))

knitr::kable(tt_sys_info_df)
```

## R Session Info

::: {.callout-note title="Information about the R environment and capabilities:" collapse=true}
```{r session_info}
sessionInfo()
```
:::

::: {.callout-note title="Platform used:" collapse=true}
```{r Platform}
reactable::reactable(unlist(.Platform) |> as.data.frame())
```
:::

::: {.callout-note title="R's capabilities:" collapse=true}
"Capabilities details"
```{r capabilities}
reactable::reactable(capabilities() |> as.data.frame())
```
:::


::: {.callout-note title="External software:" collapse=true}
```{r external-software}
extSoftVersion()
```
:::


::: {.callout-note title="Graphics external software:" collapse=true}
```{r graphic-software}
grSoftVersion()
```
:::


::: {.callout-note title="Numerical characteristics of the machine:" collapse=true}
```{r machine}
unlist(.Machine)
```
:::

::: {.callout-note title="Random number generation process:" collapse=true}
```{r RNGKind}
RNGkind()
```
:::

## Information about the environment

::: {.callout-note title="Environmental and options variables affect how package checks and software in it might behave. Here is the environmental variables when running this report" collapse=true}
```{r computing}
re <- riskreports::environ_report(exclude = c("GITHUB_PAT", "APPDATA", 
                                        "GITHUB", "GITLAB_PAT", "GITLAB",
                                        "ProgramFiles", "ProgramFiles(x86)",
                                        "R_USER", "USERNAME", "USERPROFILE", 
                                        "USERDNSDOMAIN", "USERDOMAIN", 
                                        "USERDOMAIN_ROAMINGPROFILE", "R_DptShare"              
                                        ))
re
```
:::


::: {.callout-note title="These are the options set to generate the report:" collapse=true}
```{r options}
riskreports::options_report(exclude = c("usethis.full_name", "usethis.description", "usethis.destdir"))
```
:::

