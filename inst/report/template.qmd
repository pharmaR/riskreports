---
title: "Validation Report - `r params$package`"
date: "`r Sys.time()`"
date-format: "ddd MMM DD hh:mm:ss A YYYY"
params:
  repo: "../source"
  package: riskmetric
format:
  html: 
    toc: true  
  typst:
    toc: true
    section-numbering: 1.1.1
    df-print: default
    margin:
      x: 2cm
      y: 2cm
---

```{r setup, include = FALSE}
options(width = 80L, covr.record_tests = TRUE)
knitr::opts_chunk$set(
    echo = FALSE,
    eval = TRUE,
    error = TRUE
)
library("tools")
```

# Context

This report was automated.
Documents the installation of this package on an open source R environment, focusing on:

- Installation environment description
- Testing coverage

This report is fully automated, so is limited to assess whether unit tests and documentation are present and can execute without error. An assessment would be required that the tests and documentation are meaningful. 

# Installation environment

```{r}
path <- params$repo
pkg <- params$package
```


## System Info

```{r execution_info}
tt_sys_info_df <- data.frame(
  Field = c("OS", "Platform", "System", "Execution Time"),
  Value = c(
    sessionInfo()$running,
    R.version$platform,
    R.version$system,
    format(Sys.time(), tz = "UTC", usetz = TRUE)
  ))

tt_sys_info_df
```

## R Session Info

Information about the R environment and capabilities:

```{r session_info}
sessionInfo()
unlist(.Platform)

capabilities()
extSoftVersion()
grSoftVersion()
unlist(.Machine)
RNGkind()
```

# Installation documentation

## Repository status

```{r check-repo}
# This repository is to fill the packages. It could be replaced with a common 
# repository or expanded (new option?) to an internal repository.
options("repos" = "https://cloud.r-project.org")
library("tools")
lf <- list.files(path, full.names = TRUE)
pfiles <- lf[endsWith(lf, ".tar.gz")]
cpd <- tools::check_packages_in_dir(path, 
                                    pfiles = pfiles[startsWith(basename(pfiles), pkg)],
                                    check_args = c(
    "--timings",             # include execution times in output
    "--no-build-vignettes",  # run vignette code, but disable pdf rendering
    "--no-manual",           # disable pdf manual rendering
    "--with-keep.source"))
summary_pkgs <- check_packages_in_dir_details(path)
as.data.frame(summary_pkgs)[, 1:4]
```


# Package `r pkg`

## Metric based risk assessment

The following metrics are derived from the `riskmetric` R package.
<!-- Metrics overlapping with `covr` and `R CMD Check` are removed. -->

```{r riskmetric}
lf <- list.files(path = path, pattern = pkg, full.names = TRUE)
tar_pkg <- lf[endsWith(lf, ".tar.gz")]
untar(tar_pkg, exdir = path, tar = "internal")
path_pkg_source <- file.path(path, pkg)
d_riskmetric <- riskmetric::as_pkg_ref(path_pkg_source) |> 
    riskmetric::pkg_assess()

# Assesment produces a data.frame with one row
r_riskmetric <- assesment(d_riskmetric)
r_riskmetric # Use this to have some summary text and report it. 
d_riskmetric
```


## Package stats

```{r check-package}
summary_pkg <- subset(summary_pkgs, Package == pkg)
as.data.frame(summary_pkg)[, 1:4]
```


## Testing Coverage

```{r coverage, eval = FALSE}
cov <- dplyr_a$covr_coverage$filecoverage
df <- data.frame(file = names(cov), percentage =cov) 
rownames(df) <- NULL
df
```

