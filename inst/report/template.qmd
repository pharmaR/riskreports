---
title: "Validation Report - `r sprintf('%s (v%s)',(dcf <- read.dcf(file.path(Sys.getenv('INPUT_REPORT_PKG_DIR', '.'), 'DESCRIPTION')))[,'Package'], dcf[,'Version'])`"
date: "`r Sys.time()`"
date-format: "ddd MMM DD hh:mm:ss A YYYY"
format:
  html: 
    toc: true  
  typst:
    toc: true
    section-numbering: 1.1.1
    df-print: default
    margin:
      x: 2cm
      y: 2cm
---

```{r setup, include = FALSE}
options(width = 80L, covr.record_tests = TRUE)
knitr::opts_chunk$set(
    error = TRUE
)

remotes::install_local(
  Sys.getenv('INPUT_REPORT_PKG_DIR', '.'),
  force = TRUE,
  quiet = TRUE,
  INSTALL_opts = "--with-keep.source",
  upgrade = "never"
)
library(tinytable)
```

# Context

This report was automated.
Documents the installation of this package on an open source R environment, focussing on:

- Installation environment description
- Testing coverage

This report is fully automated, so is limited to assess whether unit tests and documentation are present and can execute without error. An assessment would be required that the tests and documentation are meaningful. 

# Installation environment and package

## System Info

```{r execution_info, echo = FALSE}
tt_sys_info_df <- data.frame(
  Field = c("OS", "Platform", "System", "Execution Time"),
  Value = c(
    sessionInfo()$running,
    R.version$platform,
    R.version$system,
    format(Sys.time(), tz = "UTC", usetz = TRUE)
  )) %>%
  dplyr::mutate(Value = paste0("``` ", Value, " ```"))

tt(
  tt_sys_info_df,
  caption = "System information",
  theme = "bootstrap"
)
```

## R Session Info

Information about the R environment and capabilities:

```{r session_info, echo = TRUE, eval = TRUE}
sessionInfo()
.Platform

capabilities()
extSoftVersion()
grSoftVersion()
.Machine
RNGkind()
head(.Random.seed, 20)
```

# Metric based risk assessment

The following metrics are derived from the `riskmetric` R package. Metrics overlapping with `covr` and `R CMD Check` are removed.

```{r riskmetric, echo = FALSE, eval = TRUE}
d_riskmetric <- Sys.getenv('INPUT_REPORT_PKG_DIR', '.') %>%
  # TODO: simplify 
  lapply(as.character) %>%
  tibble::enframe() %>%
  tidyr::unnest(cols = dplyr::everything()) %>%
  # add labels
  dplyr::left_join(
    lapply(riskmetric::all_assessments(), attributes) %>%
      purrr::map_df(tibble::as_tibble),
    by = c("name" = "column_name")
  )

tt_riskmetric_df <- d_riskmetric %>%
  dplyr::filter(
    name %in% c(
      "news_current", "has_vignettes",
      "license", "downloads_1yr"
    )
  ) %>%
  dplyr::select(Metric = label, Status = value)

tt(
  tt_riskmetric_df,
  caption = "Package info assessed by the R package riskmetric",
  theme = "bootstrap"
)
```

# Installation documentation

## `R CMD check`

```{r r_cmd_check, echo = FALSE, eval = TRUE}
rcmdcheck_results <- rcmdcheck::rcmdcheck(
  Sys.getenv('INPUT_REPORT_PKG_DIR', '.'),
  args = c(
    "--timings",             # include execution times in output
    "--no-build-vignettes",  # run vignette code, but disable pdf rendering
    "--no-manual"            # disable pdf manual rendering
  ),
  quiet = TRUE
)

cat(rcmdcheck_results$stdout)
cat(rcmdcheck_results$stderr)
```

## Testing Coverage

```{r coverage, echo = FALSE, eval = TRUE}
covr_results <- covr::package_coverage(Sys.getenv('INPUT_REPORT_PKG_DIR', '.'))
covr_results
```

