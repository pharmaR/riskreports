---
title: "Validation Report - `r params$package`"
date: "`r Sys.time()`"
date-format: "ddd MMM DD hh:mm:ss A YYYY"
params:
  repo: "../source"
  package: riskmetric
format:
  html: 
    toc: true  
  # typst:
  #   toc: true
  #   section-numbering: 1.1.1
  #   df-print: default
  #   margin:
  #     x: 2cm
  #     y: 2cm
---

```{r setup, include = FALSE}
options(width = 80L, covr.record_tests = TRUE)
knitr::opts_chunk$set(
    echo = FALSE,
    eval = TRUE,
    error = TRUE,
    cache = FALSE
)
library("tools")
```

# Context

This report was automated.
Documents the installation of this package on an open source R environment, focusing on:

- Installation environment description
- Testing coverage

This report is fully automated, so is limited to assess whether unit tests and documentation are present and can execute without error. An assessment would be required that the tests and documentation are meaningful. 

# Installation environment

```{r loading}
library("riskmetric")
path <- params$repo
pkg <- params$package
```


## System Info

```{r execution_info}
tt_sys_info_df <- data.frame(
  Field = c("OS", "Platform", "System", "Execution Time"),
  Value = c(
    sessionInfo()$running,
    R.version$platform,
    R.version$system,
    format(Sys.time(), tz = "UTC", usetz = TRUE)
  ))

tt_sys_info_df
```

## R Session Info

Information about the R environment and capabilities:

```{r session_info}
sessionInfo()
unlist(.Platform)

capabilities()
extSoftVersion()
grSoftVersion()
unlist(.Machine)
RNGkind()
```


## Information about the environment

Environmental and options variables affect how package checks and software in it might behave.
Here is the environ variables when running this report

```{r computing}
riskreports::environ_report()
```

```{r options}
riskreports::options_report()
```


# Installation documentation

## Repository status

```{r repo-files}
# This repository is to fill the packages. It could be replaced with a common 
# repository or expanded (new option?) to an internal repository.
options("repos" = "https://cloud.r-project.org")
lf <- list.files(path, full.names = TRUE)
pfiles <- lf[endsWith(lf, ".tar.gz")]
tar_file <- pfiles[startsWith(basename(pfiles), pkg)]
```


```{r check-repo, cache=TRUE, cache.extra=file.mtime(tar_file)}
# Cache.extra is to avoid rechecking the file when it hasn't changed/updated
cpd <- tools::check_packages_in_dir(path, 
                                    pfiles = tar_file,
                                    check_args = c(
    "--timings",             # include execution times in output
    "--no-build-vignettes",  # run vignette code, but disable pdf rendering
    "--no-manual",           # disable pdf manual rendering
    "--with-keep.source"))
```

The repository has these packages with problems:

```{r repo-summary}
summary_pkgs <- check_packages_in_dir_details(path)
as.data.frame(summary_pkgs)[, 1:4]
```

# Package `r pkg`

## Metric based risk assessment

The following metrics are derived from the `riskmetric` R package.
<!-- Metrics overlapping with `covr` and `R CMD Check` are removed. -->

```{r riskmetric, warning=FALSE}
path_pkg_source <- file.path(path, pkg)
if (!dir.exists(path_pkg_source) || file.mtime(path_pkg_source) < file.mtime(tar_file)) {
  untar(tar_file, exdir = path, tar = "internal")
}

# Remove local check assessment done previously
aa <- riskmetric::all_assessments()
aa[["assess_r_cmd_check"]] <- NULL
d_riskmetric <- riskmetric::as_pkg_ref(path_pkg_source) |> 
    riskmetric::pkg_assess(assessments = aa[2:9])

# Assesment produces a data.frame with one row
r_riskmetric <- riskreports::assessment(d_riskmetric)
r_riskmetric # Use this to have some summary text and report it.
# d_riskmetric
```


## Package stats

```{r check-package}
summary_pkg <- subset(summary_pkgs, Package == pkg)
rownames(summary_pkg) <- NULL
as.data.frame(summary_pkg)[, 1:4]
```


```{r coverage-section,results='asis', eval=any(names(d_riskmetric) == "covr_coverage")}
paste("## Testing Coverage

Overall the package has a coverage of `r d_riskmetric$covr_coverage$totalcoverage` %.")
```

```{r coverage, eval=any(names(d_riskmetric) == "covr_coverage")}
cov <- d_riskmetric$covr_coverage$filecoverage
df <- data.frame(file = names(cov), percentage =cov) 
rownames(df) <- NULL
df
```

## Dependencies

Overall the package has these dependencies:

```{r dependencies, eval=any(names(d_riskmetric) == "dependencies")}
d_riskmetric$dependencies
```

